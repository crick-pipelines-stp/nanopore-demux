params {
    // Input params
    run_dir     = null
    bam         = null
    samplesheet = null

    // Pipeline params
    dorado_auto_model = "hac"
    dorado_model      = null
    dorado_bc_kit     = null
    dorado_device     = "cuda:all"
    dorado_both_ends  = true
    emit_bam          = false
    min_qscore        = 10

    // Boilerplate options
    outdir           = "./results"
    tracedir         = "${params.outdir}/pipeline_info"
    publish_dir_mode = 'symlink'
    monochrome_logs  = false
    debug            = false
    ignore_params    = "only_samplesheet,only_basecall,only_demux,only_filter,run_basecaller,run_demux,run_filtering,run_qc"

    // Config options
    custom_config_version = "master"
    custom_config_base    = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"

    // Max resource options
    max_memory = "128.GB"
    max_cpus   = 16
    max_time   = "240.h"

    // Flow switching
    only_samplesheet = false
    only_basecall    = false
    only_demux       = false
    only_filtering   = false
}

// Load resourse labels 
includeConfig "conf/base.config"

// Load pipeline switching logic
includeConfig "conf/logic.config"

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    arm {
        includeConfig 'conf/arm.config'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    test { includeConfig 'conf/test.config'}
    test_multi { includeConfig 'conf/test_multi.config' }
    
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
docker.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'pipelines-technology/nanopore_demux'
    author          = """Areda Elezi, Chris Cheshire"""
    homePage        = 'https://github.com/crick-pipelines-stp/nanopore-demux'
    description     = """Demultiplexing of nanopore raw data"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.10.0'
    version         = '0.1.0'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
